package org.msa.booksearch.core.utils

import io.github.oshai.kotlinlogging.KotlinLogging

// ایجاد یک شیء logger با دسترسی public برای ثبت لاگ‌ها
// این شیء از کتابخانه KotlinLogging برای ثبت لاگ‌های مختلف استفاده می‌کند.
// با توجه به سطح دسترسی public، این شیء در تمام پروژه قابل دسترسی است.
// این ابزار برای ثبت انواع لاگ‌ها (از جمله خطاها، هشدارها، اطلاعات و ... ) در پروژه به کار می‌رود.
public val logger = KotlinLogging.logger { }

/**
 * تابع ثبت لاگ در سطح DEBUG.
 *
 * این تابع برای ثبت اطلاعات مربوط به روند برنامه در حالت Debugging استفاده می‌شود.
 * معمولا از این سطح برای نمایش اطلاعات دقیق‌تر در حین توسعه و اشکال‌زدایی استفاده می‌شود.
 *
 * @param message پیامی که باید در لاگ ثبت شود.
 */
public fun logDebug(message: String) {
    logger.debug { message }
}

/**
 * تابع ثبت لاگ در سطح INFO.
 *
 * این تابع برای ثبت اطلاعات عمومی و نرمال در رابطه با عملکرد سیستم استفاده می‌شود.
 * معمولاً از این سطح برای ثبت اطلاعات عادی مانند آغاز و پایان عملیات‌ها یا وضعیت‌های عادی سیستم استفاده می‌شود.
 *
 * @param message پیامی که باید در لاگ ثبت شود.
 */
public fun logInfo(message: String) {
    logger.info { message }
}

/**
 * تابع ثبت لاگ در سطح WARN.
 *
 * این تابع برای ثبت هشدارها یا مشکلاتی که ممکن است به مشکلات جدی تبدیل شوند استفاده می‌شود.
 * معمولاً از این سطح برای هشدار دادن به توسعه‌دهندگان یا مدیران سیستم در مورد مشکلات بالقوه استفاده می‌شود.
 *
 * @param message پیامی که باید در لاگ ثبت شود.
 */
public fun logWarn(message: String) {
    logger.warn { message }
}

/**
 * تابع ثبت لاگ در سطح ERROR.
 *
 * این تابع برای ثبت خطاها و مشکلات جدی که نیاز به توجه فوری دارند استفاده می‌شود.
 * این لاگ‌ها معمولاً مربوط به استثناها یا شرایط غیرمنتظره هستند که باعث خرابی یا نقص در عملکرد سیستم می‌شوند.
 *
 * @param e استثنای مربوط به خطا که باید در لاگ ثبت شود.
 * @param message پیامی که باید در کنار استثنا در لاگ ثبت شود.
 */
public fun logError(e: Exception, message: String) {
    logger.error(e) { message }
}

/**
 * تابع ثبت لاگ در سطح ERROR بدون استثنا.
 *
 * این تابع برای ثبت خطاها بدون نیاز به اطلاعات استثنا استفاده می‌شود.
 * این سطح برای ثبت پیام‌های خطا که نیازی به جزئیات استثنا ندارند، استفاده می‌شود.
 *
 * @param message پیامی که باید در لاگ ثبت شود.
 */
public fun logError(message: String) {
    logger.error { message }
}

/**
 * تابع ثبت لاگ در سطح TRACE.
 *
 * این تابع برای ثبت جزئیات بسیار دقیق و سطح پایین‌تر از Debugging استفاده می‌شود.
 * معمولاً در مواردی که نیاز به ثبت اطلاعات بسیار دقیق برای ردیابی مشکلات پیچیده باشد، از این سطح استفاده می‌شود.
 *
 * @param message پیامی که باید در لاگ ثبت شود.
 */
public fun logTrace(message: String) {
    logger.trace { message }
}
